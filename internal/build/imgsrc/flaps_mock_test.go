// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/superfly/flyctl/internal/flapsutil (interfaces: FlapsClient)
//
// Generated by this command:
//
//	mockgen -package imgsrc -destination flaps_mock_test.go github.com/superfly/flyctl/internal/flapsutil FlapsClient
//

// Package imgsrc is a generated GoMock package.
package imgsrc

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	fly "github.com/superfly/fly-go"
	gomock "go.uber.org/mock/gomock"
)

// MockFlapsClient is a mock of FlapsClient interface.
type MockFlapsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlapsClientMockRecorder
	isgomock struct{}
}

// MockFlapsClientMockRecorder is the mock recorder for MockFlapsClient.
type MockFlapsClientMockRecorder struct {
	mock *MockFlapsClient
}

// NewMockFlapsClient creates a new mock instance.
func NewMockFlapsClient(ctrl *gomock.Controller) *MockFlapsClient {
	mock := &MockFlapsClient{ctrl: ctrl}
	mock.recorder = &MockFlapsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlapsClient) EXPECT() *MockFlapsClientMockRecorder {
	return m.recorder
}

// AcquireLease mocks base method.
func (m *MockFlapsClient) AcquireLease(ctx context.Context, machineID string, ttl *int) (*fly.MachineLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireLease", ctx, machineID, ttl)
	ret0, _ := ret[0].(*fly.MachineLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireLease indicates an expected call of AcquireLease.
func (mr *MockFlapsClientMockRecorder) AcquireLease(ctx, machineID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireLease", reflect.TypeOf((*MockFlapsClient)(nil).AcquireLease), ctx, machineID, ttl)
}

// AppNameAvailable mocks base method.
func (m *MockFlapsClient) AppNameAvailable(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppNameAvailable", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppNameAvailable indicates an expected call of AppNameAvailable.
func (mr *MockFlapsClientMockRecorder) AppNameAvailable(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppNameAvailable", reflect.TypeOf((*MockFlapsClient)(nil).AppNameAvailable), ctx, name)
}

// Cordon mocks base method.
func (m *MockFlapsClient) Cordon(ctx context.Context, machineID, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cordon", ctx, machineID, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cordon indicates an expected call of Cordon.
func (mr *MockFlapsClientMockRecorder) Cordon(ctx, machineID, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cordon", reflect.TypeOf((*MockFlapsClient)(nil).Cordon), ctx, machineID, nonce)
}

// CreateApp mocks base method.
func (m *MockFlapsClient) CreateApp(ctx context.Context, name, org string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", ctx, name, org)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockFlapsClientMockRecorder) CreateApp(ctx, name, org any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockFlapsClient)(nil).CreateApp), ctx, name, org)
}

// CreateVolume mocks base method.
func (m *MockFlapsClient) CreateVolume(ctx context.Context, req fly.CreateVolumeRequest) (*fly.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, req)
	ret0, _ := ret[0].(*fly.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockFlapsClientMockRecorder) CreateVolume(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockFlapsClient)(nil).CreateVolume), ctx, req)
}

// CreateVolumeSnapshot mocks base method.
func (m *MockFlapsClient) CreateVolumeSnapshot(ctx context.Context, volumeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeSnapshot", ctx, volumeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVolumeSnapshot indicates an expected call of CreateVolumeSnapshot.
func (mr *MockFlapsClientMockRecorder) CreateVolumeSnapshot(ctx, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeSnapshot", reflect.TypeOf((*MockFlapsClient)(nil).CreateVolumeSnapshot), ctx, volumeId)
}

// DeleteAppSecret mocks base method.
func (m *MockFlapsClient) DeleteAppSecret(ctx context.Context, name string) (*fly.DeleteAppSecretResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppSecret", ctx, name)
	ret0, _ := ret[0].(*fly.DeleteAppSecretResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppSecret indicates an expected call of DeleteAppSecret.
func (mr *MockFlapsClientMockRecorder) DeleteAppSecret(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppSecret", reflect.TypeOf((*MockFlapsClient)(nil).DeleteAppSecret), ctx, name)
}

// DeleteMetadata mocks base method.
func (m *MockFlapsClient) DeleteMetadata(ctx context.Context, machineID, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetadata", ctx, machineID, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetadata indicates an expected call of DeleteMetadata.
func (mr *MockFlapsClientMockRecorder) DeleteMetadata(ctx, machineID, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetadata", reflect.TypeOf((*MockFlapsClient)(nil).DeleteMetadata), ctx, machineID, key)
}

// DeleteSecretKey mocks base method.
func (m *MockFlapsClient) DeleteSecretKey(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretKey", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretKey indicates an expected call of DeleteSecretKey.
func (mr *MockFlapsClientMockRecorder) DeleteSecretKey(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretKey", reflect.TypeOf((*MockFlapsClient)(nil).DeleteSecretKey), ctx, name)
}

// DeleteVolume mocks base method.
func (m *MockFlapsClient) DeleteVolume(ctx context.Context, volumeId string) (*fly.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, volumeId)
	ret0, _ := ret[0].(*fly.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockFlapsClientMockRecorder) DeleteVolume(ctx, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockFlapsClient)(nil).DeleteVolume), ctx, volumeId)
}

// Destroy mocks base method.
func (m *MockFlapsClient) Destroy(ctx context.Context, input fly.RemoveMachineInput, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, input, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockFlapsClientMockRecorder) Destroy(ctx, input, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockFlapsClient)(nil).Destroy), ctx, input, nonce)
}

// Exec mocks base method.
func (m *MockFlapsClient) Exec(ctx context.Context, machineID string, in *fly.MachineExecRequest) (*fly.MachineExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, machineID, in)
	ret0, _ := ret[0].(*fly.MachineExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockFlapsClientMockRecorder) Exec(ctx, machineID, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockFlapsClient)(nil).Exec), ctx, machineID, in)
}

// ExtendVolume mocks base method.
func (m *MockFlapsClient) ExtendVolume(ctx context.Context, volumeId string, size_gb int) (*fly.Volume, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendVolume", ctx, volumeId, size_gb)
	ret0, _ := ret[0].(*fly.Volume)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExtendVolume indicates an expected call of ExtendVolume.
func (mr *MockFlapsClientMockRecorder) ExtendVolume(ctx, volumeId, size_gb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVolume", reflect.TypeOf((*MockFlapsClient)(nil).ExtendVolume), ctx, volumeId, size_gb)
}

// FindLease mocks base method.
func (m *MockFlapsClient) FindLease(ctx context.Context, machineID string) (*fly.MachineLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLease", ctx, machineID)
	ret0, _ := ret[0].(*fly.MachineLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLease indicates an expected call of FindLease.
func (mr *MockFlapsClientMockRecorder) FindLease(ctx, machineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLease", reflect.TypeOf((*MockFlapsClient)(nil).FindLease), ctx, machineID)
}

// GenerateSecretKey mocks base method.
func (m *MockFlapsClient) GenerateSecretKey(ctx context.Context, name, typ string) (*fly.SetSecretKeyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSecretKey", ctx, name, typ)
	ret0, _ := ret[0].(*fly.SetSecretKeyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSecretKey indicates an expected call of GenerateSecretKey.
func (mr *MockFlapsClientMockRecorder) GenerateSecretKey(ctx, name, typ any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSecretKey", reflect.TypeOf((*MockFlapsClient)(nil).GenerateSecretKey), ctx, name, typ)
}

// Get mocks base method.
func (m *MockFlapsClient) Get(ctx context.Context, machineID string) (*fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, machineID)
	ret0, _ := ret[0].(*fly.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFlapsClientMockRecorder) Get(ctx, machineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFlapsClient)(nil).Get), ctx, machineID)
}

// GetAllVolumes mocks base method.
func (m *MockFlapsClient) GetAllVolumes(ctx context.Context) ([]fly.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVolumes", ctx)
	ret0, _ := ret[0].([]fly.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVolumes indicates an expected call of GetAllVolumes.
func (mr *MockFlapsClientMockRecorder) GetAllVolumes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVolumes", reflect.TypeOf((*MockFlapsClient)(nil).GetAllVolumes), ctx)
}

// GetMany mocks base method.
func (m *MockFlapsClient) GetMany(ctx context.Context, machineIDs []string) ([]*fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, machineIDs)
	ret0, _ := ret[0].([]*fly.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockFlapsClientMockRecorder) GetMany(ctx, machineIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockFlapsClient)(nil).GetMany), ctx, machineIDs)
}

// GetMetadata mocks base method.
func (m *MockFlapsClient) GetMetadata(ctx context.Context, machineID string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, machineID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockFlapsClientMockRecorder) GetMetadata(ctx, machineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockFlapsClient)(nil).GetMetadata), ctx, machineID)
}

// GetProcesses mocks base method.
func (m *MockFlapsClient) GetProcesses(ctx context.Context, machineID string) (fly.MachinePsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcesses", ctx, machineID)
	ret0, _ := ret[0].(fly.MachinePsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcesses indicates an expected call of GetProcesses.
func (mr *MockFlapsClientMockRecorder) GetProcesses(ctx, machineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcesses", reflect.TypeOf((*MockFlapsClient)(nil).GetProcesses), ctx, machineID)
}

// GetVolume mocks base method.
func (m *MockFlapsClient) GetVolume(ctx context.Context, volumeId string) (*fly.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", ctx, volumeId)
	ret0, _ := ret[0].(*fly.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockFlapsClientMockRecorder) GetVolume(ctx, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockFlapsClient)(nil).GetVolume), ctx, volumeId)
}

// GetVolumeSnapshots mocks base method.
func (m *MockFlapsClient) GetVolumeSnapshots(ctx context.Context, volumeId string) ([]fly.VolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeSnapshots", ctx, volumeId)
	ret0, _ := ret[0].([]fly.VolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeSnapshots indicates an expected call of GetVolumeSnapshots.
func (mr *MockFlapsClientMockRecorder) GetVolumeSnapshots(ctx, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeSnapshots", reflect.TypeOf((*MockFlapsClient)(nil).GetVolumeSnapshots), ctx, volumeId)
}

// GetVolumes mocks base method.
func (m *MockFlapsClient) GetVolumes(ctx context.Context) ([]fly.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumes", ctx)
	ret0, _ := ret[0].([]fly.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumes indicates an expected call of GetVolumes.
func (mr *MockFlapsClientMockRecorder) GetVolumes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumes", reflect.TypeOf((*MockFlapsClient)(nil).GetVolumes), ctx)
}

// Kill mocks base method.
func (m *MockFlapsClient) Kill(ctx context.Context, machineID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kill", ctx, machineID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockFlapsClientMockRecorder) Kill(ctx, machineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockFlapsClient)(nil).Kill), ctx, machineID)
}

// Launch mocks base method.
func (m *MockFlapsClient) Launch(ctx context.Context, builder fly.LaunchMachineInput) (*fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Launch", ctx, builder)
	ret0, _ := ret[0].(*fly.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Launch indicates an expected call of Launch.
func (mr *MockFlapsClientMockRecorder) Launch(ctx, builder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Launch", reflect.TypeOf((*MockFlapsClient)(nil).Launch), ctx, builder)
}

// List mocks base method.
func (m *MockFlapsClient) List(ctx context.Context, state string) ([]*fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, state)
	ret0, _ := ret[0].([]*fly.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFlapsClientMockRecorder) List(ctx, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFlapsClient)(nil).List), ctx, state)
}

// ListActive mocks base method.
func (m *MockFlapsClient) ListActive(ctx context.Context) ([]*fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActive", ctx)
	ret0, _ := ret[0].([]*fly.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActive indicates an expected call of ListActive.
func (mr *MockFlapsClientMockRecorder) ListActive(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActive", reflect.TypeOf((*MockFlapsClient)(nil).ListActive), ctx)
}

// ListAppSecrets mocks base method.
func (m *MockFlapsClient) ListAppSecrets(ctx context.Context, version *uint64, showSecrets bool) ([]fly.AppSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAppSecrets", ctx, version, showSecrets)
	ret0, _ := ret[0].([]fly.AppSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAppSecrets indicates an expected call of ListAppSecrets.
func (mr *MockFlapsClientMockRecorder) ListAppSecrets(ctx, version, showSecrets any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAppSecrets", reflect.TypeOf((*MockFlapsClient)(nil).ListAppSecrets), ctx, version, showSecrets)
}

// ListFlyAppsMachines mocks base method.
func (m *MockFlapsClient) ListFlyAppsMachines(ctx context.Context) ([]*fly.Machine, *fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlyAppsMachines", ctx)
	ret0, _ := ret[0].([]*fly.Machine)
	ret1, _ := ret[1].(*fly.Machine)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFlyAppsMachines indicates an expected call of ListFlyAppsMachines.
func (mr *MockFlapsClientMockRecorder) ListFlyAppsMachines(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlyAppsMachines", reflect.TypeOf((*MockFlapsClient)(nil).ListFlyAppsMachines), ctx)
}

// ListSecretKeys mocks base method.
func (m *MockFlapsClient) ListSecretKeys(ctx context.Context, version *uint64) ([]fly.SecretKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretKeys", ctx, version)
	ret0, _ := ret[0].([]fly.SecretKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretKeys indicates an expected call of ListSecretKeys.
func (mr *MockFlapsClientMockRecorder) ListSecretKeys(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretKeys", reflect.TypeOf((*MockFlapsClient)(nil).ListSecretKeys), ctx, version)
}

// NewRequest mocks base method.
func (m *MockFlapsClient) NewRequest(ctx context.Context, method, path string, in any, headers map[string][]string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRequest", ctx, method, path, in, headers)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRequest indicates an expected call of NewRequest.
func (mr *MockFlapsClientMockRecorder) NewRequest(ctx, method, path, in, headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRequest", reflect.TypeOf((*MockFlapsClient)(nil).NewRequest), ctx, method, path, in, headers)
}

// RefreshLease mocks base method.
func (m *MockFlapsClient) RefreshLease(ctx context.Context, machineID string, ttl *int, nonce string) (*fly.MachineLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshLease", ctx, machineID, ttl, nonce)
	ret0, _ := ret[0].(*fly.MachineLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshLease indicates an expected call of RefreshLease.
func (mr *MockFlapsClientMockRecorder) RefreshLease(ctx, machineID, ttl, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshLease", reflect.TypeOf((*MockFlapsClient)(nil).RefreshLease), ctx, machineID, ttl, nonce)
}

// ReleaseLease mocks base method.
func (m *MockFlapsClient) ReleaseLease(ctx context.Context, machineID, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLease", ctx, machineID, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLease indicates an expected call of ReleaseLease.
func (mr *MockFlapsClientMockRecorder) ReleaseLease(ctx, machineID, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLease", reflect.TypeOf((*MockFlapsClient)(nil).ReleaseLease), ctx, machineID, nonce)
}

// Restart mocks base method.
func (m *MockFlapsClient) Restart(ctx context.Context, in fly.RestartMachineInput, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, in, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockFlapsClientMockRecorder) Restart(ctx, in, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockFlapsClient)(nil).Restart), ctx, in, nonce)
}

// SetAppSecret mocks base method.
func (m *MockFlapsClient) SetAppSecret(ctx context.Context, name, value string) (*fly.SetAppSecretResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAppSecret", ctx, name, value)
	ret0, _ := ret[0].(*fly.SetAppSecretResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAppSecret indicates an expected call of SetAppSecret.
func (mr *MockFlapsClientMockRecorder) SetAppSecret(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAppSecret", reflect.TypeOf((*MockFlapsClient)(nil).SetAppSecret), ctx, name, value)
}

// SetMetadata mocks base method.
func (m *MockFlapsClient) SetMetadata(ctx context.Context, machineID, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMetadata", ctx, machineID, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMetadata indicates an expected call of SetMetadata.
func (mr *MockFlapsClientMockRecorder) SetMetadata(ctx, machineID, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMetadata", reflect.TypeOf((*MockFlapsClient)(nil).SetMetadata), ctx, machineID, key, value)
}

// SetSecretKey mocks base method.
func (m *MockFlapsClient) SetSecretKey(ctx context.Context, name, typ string, value []byte) (*fly.SetSecretKeyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecretKey", ctx, name, typ, value)
	ret0, _ := ret[0].(*fly.SetSecretKeyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSecretKey indicates an expected call of SetSecretKey.
func (mr *MockFlapsClientMockRecorder) SetSecretKey(ctx, name, typ, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecretKey", reflect.TypeOf((*MockFlapsClient)(nil).SetSecretKey), ctx, name, typ, value)
}

// Start mocks base method.
func (m *MockFlapsClient) Start(ctx context.Context, machineID, nonce string) (*fly.MachineStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, machineID, nonce)
	ret0, _ := ret[0].(*fly.MachineStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockFlapsClientMockRecorder) Start(ctx, machineID, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFlapsClient)(nil).Start), ctx, machineID, nonce)
}

// Stop mocks base method.
func (m *MockFlapsClient) Stop(ctx context.Context, in fly.StopMachineInput, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, in, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockFlapsClientMockRecorder) Stop(ctx, in, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockFlapsClient)(nil).Stop), ctx, in, nonce)
}

// Suspend mocks base method.
func (m *MockFlapsClient) Suspend(ctx context.Context, machineID, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", ctx, machineID, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Suspend indicates an expected call of Suspend.
func (mr *MockFlapsClientMockRecorder) Suspend(ctx, machineID, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockFlapsClient)(nil).Suspend), ctx, machineID, nonce)
}

// Uncordon mocks base method.
func (m *MockFlapsClient) Uncordon(ctx context.Context, machineID, nonce string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uncordon", ctx, machineID, nonce)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uncordon indicates an expected call of Uncordon.
func (mr *MockFlapsClientMockRecorder) Uncordon(ctx, machineID, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uncordon", reflect.TypeOf((*MockFlapsClient)(nil).Uncordon), ctx, machineID, nonce)
}

// Update mocks base method.
func (m *MockFlapsClient) Update(ctx context.Context, builder fly.LaunchMachineInput, nonce string) (*fly.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, builder, nonce)
	ret0, _ := ret[0].(*fly.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFlapsClientMockRecorder) Update(ctx, builder, nonce any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFlapsClient)(nil).Update), ctx, builder, nonce)
}

// UpdateAppSecrets mocks base method.
func (m *MockFlapsClient) UpdateAppSecrets(ctx context.Context, values map[string]*string) (*fly.UpdateAppSecretsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppSecrets", ctx, values)
	ret0, _ := ret[0].(*fly.UpdateAppSecretsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppSecrets indicates an expected call of UpdateAppSecrets.
func (mr *MockFlapsClientMockRecorder) UpdateAppSecrets(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppSecrets", reflect.TypeOf((*MockFlapsClient)(nil).UpdateAppSecrets), ctx, values)
}

// UpdateVolume mocks base method.
func (m *MockFlapsClient) UpdateVolume(ctx context.Context, volumeId string, req fly.UpdateVolumeRequest) (*fly.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", ctx, volumeId, req)
	ret0, _ := ret[0].(*fly.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockFlapsClientMockRecorder) UpdateVolume(ctx, volumeId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockFlapsClient)(nil).UpdateVolume), ctx, volumeId, req)
}

// Wait mocks base method.
func (m *MockFlapsClient) Wait(ctx context.Context, machine *fly.Machine, state string, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx, machine, state, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockFlapsClientMockRecorder) Wait(ctx, machine, state, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockFlapsClient)(nil).Wait), ctx, machine, state, timeout)
}

// WaitForApp mocks base method.
func (m *MockFlapsClient) WaitForApp(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForApp", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForApp indicates an expected call of WaitForApp.
func (mr *MockFlapsClientMockRecorder) WaitForApp(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForApp", reflect.TypeOf((*MockFlapsClient)(nil).WaitForApp), ctx, name)
}
